; Задание 9. 
; Определите функцию, разделяющую исходный список на два подсписка. В
; первый из них должны попасть элементы с нечетными номерами, во второй —
; элементы с четными номерами.

; Код:


(defun sub-lists(lst)
      (cond
         ((null lst) '(() ()))
         ( (evenp (car lst)) (cons (car (sub-lists(cdr lst))) (cons (cons (car lst)   (cadr (sub-lists(cdr lst))))())))
         (t(cons (cons (car lst) (car (sub-lists(cdr lst)))) (cdr (sub-lists(cdr lst)))))
       )
)
;
;------------------------------------------------------------------------------
;

(print(sub-lists '(1 2 3 4 5 6)))
(print(sub-lists '(1 2 3 4)))

;
;------------------------------------------------------------------------------
;

; Задание 19.

; Определите функцию (ЛУКОВИЦА n), строящую N-уровневый вложенный список, элементом которого на самом глубоком уровне является N.

;Код:

(defun луковица (n)
    (_луковица n n))
(defun _луковица (n v)
    (cond((= n 0)v)
        (t(cons (_луковица (- n 1) v) nil))))

;
;------------------------------------------------------------------------------
;


(print (луковица 5))
(print (луковица 2))


;
;------------------------------------------------------------------------------
;


; Залание 25. 

; Определите функцию, удаляющую из списка каждый четный элемент

; Код:

(defun filter (lst)
    (cond((null lst)nil)
        (t(cons(car lst)
            (filter (cddr lst))))))
;
;------------------------------------------------------------------------------
;

(print (filter '(1 2 3 4)))
(print (filter '(1 2 3 4 5 6)))

;
;------------------------------------------------------------------------------
;


; Задание 26
; Определите функцию, разбивающую список (a b с d...) на пары ((а b) (с d)...).

(defun pairs (lst)
    (cond((null lst)nil)
        (t(cons(cons (car lst) (cons (cadr lst) nil))
                (pairs (cddr lst))))))


;
;------------------------------------------------------------------------------
;
(print (pairs '(1 2 3 4 5 6)))
(print (pairs '(1 2 3)))

;
;------------------------------------------------------------------------------
;

; Задание 29 
; Определите функцию, вычисляющую глубину списка (самой глубокой ветви).

(defun depth (lst)
    (cond((null lst)0)
       (t(max(+ (depth (car lst)) 1)
           (depth (cdr lst))))))
;
;------------------------------------------------------------------------------
;
(print (depth '(nil (nil) nil)))
(print (depth '(nil (nil) ((nil)))))
;
;------------------------------------------------------------------------------
;


; Задание 34
; Определите предикат РАВЕНСТВО-МНОЖЕСТВ, проверяющий совпадение двух множеств (независимо от порядка следования элементов).


(defun equal-set (lst-a lst-b)
    (cond((and (null lst-a) (null lst-b))T)
        ((or (null lst-a) (null lst-b))nil)
        (t(equal-set (cdr lst-a) (remove-value lst-b (car lst-a))))))
(defun remove-value (lst v)
    (cond((null lst)nil)(t((lambda (e)
                (cond((= (car lst) v)e)
                    (t(cons (car lst) e)))) (remove-value (cdr lst) v)))))


;
;------------------------------------------------------------------------------
;
(print (equal-set '(1 2 3) '(3 2 1)))
(print (equal-set '(1 2 3) '(4 5 6)))
(print (equal-set '(1 2) '(1 2 3)))
(print (equal-set '() '()))
;
;------------------------------------------------------------------------------
;

; Задание 36
;Определите функцию ПОДМНОЖЕСТВО, которая проверяет, является ли одно множество подмножеством другого. 
; Определите также СОБСТВЕННОЕ-ПОДМНОЖЕСТВО.

(defun intersect (lst-a lst-b)
    (cond((null lst-a)nil)
        ((list-contains lst-b (car lst-a))t)
            (t(intersect (cdr lst-a) lst-b))))
(defun list-contains (lst v)
    (cond((null lst)nil)((= (car lst) v)t)
        (t(list-contains (cdr lst) v))))

;
;------------------------------------------------------------------------------
;
(print (intersect '(1 2 3) '(3 4 5)))
(print (intersect '(1 2 3) '(4 5 6)))

;
;------------------------------------------------------------------------------
;









